#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = __importDefault(require("./index"));
const common_1 = require("./common");
const indent = (n) => ' '.repeat(n * 4);
const usage = (command, ...desc) => {
    console.log('\n' + indent(2) + command);
    desc.forEach((msg) => console.log(indent(2.5) + msg));
};
const arg = (n) => process.argv[n + 1] || '';
const args = process.argv.slice(1);
if (!arg(1)) {
    console.log('Type `wikity help` for a list of commands.');
}
else if (arg(1).includes('h')) {
    console.log(`\n${indent(1)}Wikity CLI commands:`);
    usage(`wikity (help|-h)`, `Display this help message.`);
    usage(`wikity compile [<folder>] [-o <folder>] [-t <folder>] -i <folder>] [-e] [-d]`, `Compile wikitext files from a given folder.`, `  [<folder>]\n${indent(3.5)}Input folder ('.' (current folder) if unset).`, `  (-o|--outputFolder) <folder>\n${indent(3.5)}Folder that compiled HTML files are placed in ('wikity-out' if unset).`, `  (-t|--templatesFolder) <folder>\n${indent(3.5)}Where to place wiki templates ('templates' if unset).`, `  (-i|--imagesFolder) <folder>\n${indent(3.5)}Where to place wiki images ('images' if unset).`, `  (-e|--eleventy)\n${indent(3.5)}Compiles files with Eleventy front matter (false if unset).`, `  (-d|--defaultStyles)\n${indent(3.5)}Add default wiki styling to all pages (true if unset).`);
    usage(`wikity (parse|-p) "<input>"`, `Parse raw wikitext from the command line.`);
    usage(`wikity (version|-v)`, `Display the current version of Wikity.`);
}
else if (arg(1).includes('c')) {
    const configArgs = args.slice(2);
    const argsList = configArgs.join(' ');
    const getArgContent = (arg) => arg.test(argsList) && configArgs.filter((_, i) => arg.test(configArgs[i - 1])).join(' ') || '';
    const folder = arg(2) || '.';
    const outputFolder = getArgContent(/^-+o/);
    const templatesFolder = getArgContent(/^-+t/);
    const imagesFolder = getArgContent(/^-+i/);
    const eleventy = /^-+e/.test(argsList);
    const defaultStyles = /^-+d/.test(argsList);
    index_1.default.compile(folder, { outputFolder, templatesFolder, imagesFolder, eleventy, defaultStyles });
}
else if (arg(1).includes('p')) {
    const input = arg(2);
    console.log(index_1.default.parse(input));
}
else if (arg(1).includes('v')) {
    console.log('The current version of Wikity is ' + common_1.VERSION);
}
else {
    console.log('Unknown command; type `wikity help` for help');
}
